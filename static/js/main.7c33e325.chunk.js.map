{"version":3,"sources":["components/ScrollIntoView.js","components/Post.js","components/PostCard.js","routes/Recent.js","routes/Work.js","routes/Study.js","routes/Blog.js","routes/Notfound.js","components/Search.js","components/Nav.js","App.js","apollo.js","index.js"],"names":["ScrollIntoView","componentDidMount","window","scrollTo","componentDidUpdate","prevProps","props","location","render","children","PureComponent","withRouter","override","css","GET_SINGLE_POST","gql","Post","date","match","history","POST_ID","params","id","useQuery","variables","loading","error","data","className","size","color","onClick","goBack","icon","faArrowLeft","post","title","faCalendar","Date","toDateString","faPen","author","name","dangerouslySetInnerHTML","__html","content","PostCard","node","featuredImage","excerpt","termNames","tags","to","src","mediaItemUrl","alt","nodes","length","map","tag","i","key","faStickyNote","formatDate","GET_RECENT_POST","Recent","after","fetchMore","posts","dataLength","edges","next","cursor","pageInfo","endCursor","updateQuery","prev","fetchMoreResult","newEdges","__typename","hasMore","hasNextPage","loader","endMessage","Work","Study","Blog","Notfound","Search","GET_PROFILE","Nav","generalSettings","href","url","target","rel","description","class","exact","activeClassName","App","basename","path","component","client","ApolloClient","uri","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7c33e325.chunk.js","sourcesContent":["import { PureComponent } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollIntoView extends PureComponent {\n    componentDidMount = () => window.scrollTo(0, 0);\n\n    componentDidUpdate = prevProps => {\n        if (this.props.location !== prevProps.location) window.scrollTo(0, 0);\n    };\n\n    render = () => this.props.children;\n}\n\nexport default withRouter(ScrollIntoView);","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport '../css/post.scss';\nimport { faPen, faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCalendar } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst override = css`\n    margin:0 auto;\n    text-align:center;\n`\nconst formatDate = date => new Date(date).toDateString();\n\nconst GET_SINGLE_POST = gql`\n    query GetSinglePost($id: ID!){\n        post(id: $id) {\n            title(format: RENDERED)\n            author {\n                name\n                }\n            content(format: RENDERED)\n            date\n            id\n            termNames(taxonomies: CATEGORY)\n            tags {\n                edges {\n                    node {\n                    id\n                    }\n                }\n            }\n        }   \n  }\n`;\n\nconst Post = ({ match, history }) => {\n    const POST_ID = match.params.id;\n    const { loading, error, data } = useQuery(GET_SINGLE_POST, {\n        variables: { id: POST_ID }\n    });\n    const content = () => {\n        return { __html: data?.post.content }\n    }\n\n    return (\n        < div className=\"post_wrap\" >\n\n            {error ? <p className=\"error_message\">포스트를 불러오는데 실패했습니다</p> :\n                loading ? <BeatLoader\n                    size={10}\n                    css={override}\n                    color={\"#01c080\"}\n                /> :\n                    <>\n                        <button onClick={history.goBack} className=\"go_back\"><FontAwesomeIcon icon={faArrowLeft} className=\"post_icon\" /><i>List</i></button>\n                        <h3 className=\"title\">{data?.post?.title}</h3>\n                        <div className=\"meta\">\n                            <p className=\"date\"><FontAwesomeIcon icon={faCalendar} className=\"post_icon\" />{formatDate(data?.post.date)}</p>\n                            <p className=\"writer\"><FontAwesomeIcon icon={faPen} className=\"post_icon\" />{data?.post.author.name}</p>\n                        </div>\n                        <div className=\"content\" dangerouslySetInnerHTML={content()}></div>\n                    </>\n            }\n        </div >\n    )\n\n}\n\nexport default Post;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/post_card.scss';\nimport { faPen, faStickyNote } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCalendar } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst formatDate = date => new Date(date).toDateString();\n\nconst PostCard = ({ post }) => {\n\n\n    const { title, date, author, featuredImage, excerpt, id, termNames, tags } = post.node;\n    const summary = () => {\n        return { __html: excerpt }\n    }\n    const postTitle = () => {\n        return { __html: title }\n    }\n\n    return (\n        <>\n            <Link to={`/${termNames}/${id}`} className=\"post_card\">\n                {featuredImage && <figure className=\"poster\"><img src={featuredImage.mediaItemUrl} alt={title} /></figure>}\n                <h3 className=\"title\" dangerouslySetInnerHTML={(postTitle())}></h3>\n                <div dangerouslySetInnerHTML={(summary())} className=\"content\"></div>\n                {tags.nodes.length > 0 && <div className=\"terms\">\n                    {tags.nodes.map((tag, i) => <i className=\"tag\" key={i}>{tag.name}</i>)}\n                </div>}\n                <div className=\"meta\">\n                    <p className=\"category\"><FontAwesomeIcon icon={faStickyNote} className=\"post_icon\" />{termNames}</p>\n                    <p className=\"date\"><FontAwesomeIcon icon={faCalendar} className=\"post_icon\" />{formatDate(date)}</p>\n                    <p className=\"writer\"><FontAwesomeIcon icon={faPen} className=\"post_icon\" />{author?.name}</p>\n                </div>\n            </Link>\n        </>\n    )\n}\n\nexport default PostCard\n","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport PostCard from '../components/PostCard';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst override = css`\n    margin:0 auto;\n    position:fixed;\n    top:50%;\n    left:50%;\n    transform:translate(-50%);\n`;\n\nconst GET_RECENT_POST = gql`\n    query getRecentPost($cursor: String) {\n        posts(first: 5, after: $cursor) {\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    date\n                    author {\n                        name\n                    }\n                    featuredImage {\n                        mediaItemUrl\n                    }\n                    excerpt\n                    id\n                    title(format: RENDERED)\n                    termSlugs(taxonomies: TAG)\n                    termNames(taxonomies: CATEGORY)\n                    tags {\n                        nodes {\n                            name\n                        }\n                    }\n                }\n            }\n            __typename\n        }\n        }\n\n`;\n\nconst Recent = () => {\n\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\n        variables: {\n            after: null\n        },\n\n    });\n\n    const loadMore = () => {\n        fetchMore({\n            variables: {\n                cursor: data.posts.pageInfo.endCursor\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.posts.edges;\n                const pageInfo = fetchMoreResult.posts.pageInfo;\n                if (!fetchMoreResult) {\n                    return prev;\n                }\n                return {\n                    posts: {\n                        pageInfo,\n                        edges: [...prev.posts.edges, ...newEdges],\n                        __typename: \"RootQueryToPostConnectionEdge\"\n                    }\n\n                }\n            }\n        })\n    }\n\n    return (\n        <>\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\n            {!loading && data && data.posts && (\n                <InfiniteScroll\n                    dataLength={data.posts.edges.length}\n                    next={loadMore}\n                    hasMore={data.posts.pageInfo.hasNextPage}\n                    loader={\n                        <BeatLoader\n                            css={override}\n                            size={20}\n                            color={\"#01c080\"}\n                        />\n                    }\n                    endMessage={\n                        <p className=\"end_message\">\n                            마지막 포스트입니다\n                        </p>\n                    }\n                >\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\n                </InfiniteScroll>\n            )\n            }\n\n        </>\n    )\n}\n\nexport default Recent;","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport PostCard from '../components/PostCard';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\n\nconst override = css`\n    margin:0 auto;\n    position:fixed;\n    top:50%;\n    left:50%;\n    transform:translate(-50%);\n    color:red;\n`;\nconst GET_RECENT_POST = gql`\n    query getRecentPost($cursor: String) {\n        posts(first: 5, after: $cursor, where: {categoryName: \"work\"}) {\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    date\n                    author {\n                        name\n                    }\n                    featuredImage {\n                        mediaItemUrl\n                    }\n                    excerpt\n                    id\n                    title(format: RENDERED)\n                    termSlugs(taxonomies: TAG)\n                    termNames(taxonomies: CATEGORY)\n                    tags {\n                        nodes {\n                            name\n                        }\n                    }\n                }\n            }\n            __typename\n        }\n        }\n\n`;\n\nconst Work = () => {\n\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\n        variables: {\n            after: null\n        },\n\n    });\n\n    const loadMore = () => {\n        fetchMore({\n            variables: {\n                cursor: data.posts.pageInfo.endCursor\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.posts.edges;\n                const pageInfo = fetchMoreResult.posts.pageInfo;\n                if (!fetchMoreResult) {\n                    return prev;\n                }\n                return {\n                    posts: {\n                        pageInfo,\n                        edges: [...prev.posts.edges, ...newEdges],\n                        __typename: \"RootQueryToPostConnectionEdge\"\n                    }\n\n                }\n            }\n        })\n    }\n\n    return (\n        <>\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\n            {!loading && data && data.posts && (\n                <InfiniteScroll\n                    dataLength={data.posts.edges.length}\n                    next={loadMore}\n                    hasMore={data.posts.pageInfo.hasNextPage}\n                    loader={\n                        <BeatLoader\n                            css={override}\n                            size={20}\n                            color={\"#01c080\"}\n                        />\n                    }\n                    endMessage={\n                        <p className=\"end_message\">\n                            마지막 포스트입니다\n                        </p>\n                    }\n                >\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\n                </InfiniteScroll>\n            )\n            }\n\n        </>\n    )\n}\n\nexport default Work;","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport PostCard from '../components/PostCard';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst override = css`\n    margin:0 auto;\n    position:fixed;\n    top:50%;\n    left:50%;\n    transform:translate(-50%);\n    color:red;\n`;\n\nconst GET_RECENT_POST = gql`\n    query getRecentPost($cursor: String) {\n        posts(first: 5, after: $cursor, where: {categoryName: \"study\"}) {\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    date\n                    author {\n                        name\n                    }\n                    featuredImage {\n                        mediaItemUrl\n                    }\n                    excerpt\n                    id\n                    title(format: RENDERED)\n                    termSlugs(taxonomies: TAG)\n                    termNames(taxonomies: CATEGORY)\n                    tags {\n                        nodes {\n                            name\n                        }\n                    }\n                }\n            }\n            __typename\n        }\n        }\n\n`;\n\nconst Study = () => {\n\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\n        variables: {\n            after: null\n        },\n\n    });\n\n    const loadMore = () => {\n        fetchMore({\n            variables: {\n                cursor: data.posts.pageInfo.endCursor\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.posts.edges;\n                const pageInfo = fetchMoreResult.posts.pageInfo;\n                if (!fetchMoreResult) {\n                    return prev;\n                }\n                return {\n                    posts: {\n                        pageInfo,\n                        edges: [...prev.posts.edges, ...newEdges],\n                        __typename: \"RootQueryToPostConnectionEdge\"\n                    }\n\n                }\n            }\n        })\n    }\n\n    return (\n        <>\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\n            {!loading && data && data.posts && (\n                <InfiniteScroll\n                    dataLength={data.posts.edges.length}\n                    next={loadMore}\n                    hasMore={data.posts.pageInfo.hasNextPage}\n                    loader={\n                        <BeatLoader\n                            css={override}\n                            size={20}\n                            color={\"#01c080\"}\n                        />\n                    }\n                    endMessage={\n                        <p className=\"end_message\">\n                            마지막 포스트입니다\n                        </p>\n                    }\n                >\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\n                </InfiniteScroll>\n            )\n            }\n\n        </>\n    )\n}\n\nexport default Study;","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport PostCard from '../components/PostCard';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst override = css`\n    margin:0 auto;\n    position:fixed;\n    top:50%;\n    left:50%;\n    transform:translate(-50%);\n    color:red;\n`;\n\nconst GET_RECENT_POST = gql`\n    query getRecentPost($cursor: String) {\n        posts(first: 5, after: $cursor, where: {categoryName: \"blog\"}) {\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n            edges {\n                node {\n                    date\n                    author {\n                        name\n                    }\n                    featuredImage {\n                        mediaItemUrl\n                    }\n                    excerpt\n                    id\n                    title(format: RENDERED)\n                    termSlugs(taxonomies: TAG)\n                    termNames(taxonomies: CATEGORY)\n                    tags {\n                        nodes {\n                            name\n                        }\n                    }\n                }\n            }\n            __typename\n        }\n        }\n\n`;\n\nconst Blog = () => {\n\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\n        variables: {\n            after: null\n        },\n\n    });\n\n    const loadMore = () => {\n        fetchMore({\n            variables: {\n                cursor: data.posts.pageInfo.endCursor\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.posts.edges;\n                const pageInfo = fetchMoreResult.posts.pageInfo;\n                if (!fetchMoreResult) {\n                    return prev;\n                }\n                return {\n                    posts: {\n                        pageInfo,\n                        edges: [...prev.posts.edges, ...newEdges],\n                        __typename: \"RootQueryToPostConnectionEdge\"\n                    }\n\n                }\n            }\n        })\n    }\n\n    return (\n        <>\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\n            {!loading && data && data.posts && (\n                <InfiniteScroll\n                    dataLength={data.posts.edges.length}\n                    next={loadMore}\n                    hasMore={data.posts.pageInfo.hasNextPage}\n                    loader={\n                        <BeatLoader\n                            css={override}\n                            size={20}\n                            color={\"#01c080\"}\n                        />\n                    }\n                    endMessage={\n                        <p className=\"end_message\">\n                            마지막 포스트입니다\n                        </p>\n                    }\n                >\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\n                </InfiniteScroll>\n            )\n            }\n\n        </>\n    )\n}\n\nexport default Blog;","import React from 'react'\n\nconst Notfound = () => {\n    return (\n        <div>\n            페이지를 찾을 수 없습니다.\n        </div>\n    )\n}\n\nexport default Notfound\n","import React from 'react';\n\nconst Search = props => {\n\n\n    return (\n        <div>\n        </div>\n    )\n}\n\n\nexport default Search\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport Search from './Search';\n\n\n\nconst GET_PROFILE = gql`\n{\n    generalSettings {\n    url\n    description\n    title\n  }\n}\n\n`;\n\nconst Nav = () => {\n\n    const { loading, data, error } = useQuery(GET_PROFILE);\n\n    return (\n        <aside className=\"aside\">\n            <section className=\"profile\">\n                {loading ? <span className=\"profile_loading\">loading</span> :\n                    <>\n                        <figure className=\"site_pic\"></figure>\n                        <figure className=\"profile_pic\">\n                            <div className=\"frame\">\n                                <img src=\"https://www.gravatar.com/avatar/bdec2720f46316a7ae8fff2ef7739eb4?s=200\" alt=\"\" />\n                            </div>\n                        </figure>\n                        <div className=\"site_info\">\n                            <h1 className=\"title\">{data?.generalSettings.title}</h1>\n                            <a href={data?.generalSettings.url} className=\"url\" target=\"_blank\" rel=\"noopener noreferrer\">{data?.generalSettings.url}</a>\n                            <p className=\"description\" dangerouslySetInnerHTML={{ __html: data?.generalSettings.description }}></p>\n                        </div>\n                    </>\n                }\n                {error && <p class=\"error_message\">데이터를 불러오는데 실패했습니다</p>}\n            </section>\n            <nav className=\"gnb\">\n                <ul className=\"gnb_item\">\n                    <li><NavLink exact to=\"/\" activeClassName=\"active\">Posts</NavLink></li>\n                    <li><NavLink to=\"/Work\" activeClassName=\"active\">Work</NavLink></li>\n                    <li><NavLink to=\"/Study\" activeClassName=\"active\">Study</NavLink></li>\n                    <li><NavLink to=\"/Blog\" activeClassName=\"active\">Blog</NavLink></li>\n                </ul>\n            </nav>\n            <Search />\n        </aside>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport ScrollIntoView from \"./components/ScrollIntoView\";\nimport Post from './components/Post';\nimport Recent from './routes/Recent';\nimport Work from './routes/Work';\nimport Study from './routes/Study';\nimport Blog from './routes/Blog';\nimport Notfound from './routes/Notfound';\nimport Nav from './components/Nav';\nimport './css/layout.scss'\n\n\nfunction App() {\n\n  return (\n    <HashRouter basename=\"/wp-graphql\">\n      <ScrollIntoView>\n        <div className=\"wrap\">\n          <Nav />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Recent} />\n              <Route exact path=\"/work\" component={Work} />\n              <Route exact path=\"/study\" component={Study} />\n              <Route exact path=\"/blog\" component={Blog} />\n              <Route path=\"/work/:id\" component={Post} />\n              <Route path=\"/study/:id\" component={Post} />\n              <Route path=\"/blog/:id\" component={Post} />\n              <Route component={Notfound} />\n            </Switch>\n          </div>\n        </div>\n      </ScrollIntoView>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    uri: \"https://batdog.kr/graphql\"\n})\n\nexport default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from './apollo';\nimport './css/reset.css'\n\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'));\n"],"sourceRoot":""}